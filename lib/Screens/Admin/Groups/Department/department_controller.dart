import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:craving_craze/Utils/Global/global.dart';
import 'package:flutter/material.dart';

import 'department_model.dart';

class DepartmentController extends ChangeNotifier {
  TextEditingController nameController = TextEditingController();

  late FirebaseFirestore firestore = FirebaseFirestore.instance;
  String group = '';
  String autoGeneratedCode = '';
  bool isLoading = false;

  bool show = true;

  // String group = '1-bakery';
  List<String> groups = [];
  List<String> vatOptions = ['NONE VAT', '5%', '10%'];
  String vat = 'NONE VAT';

  int kpSelected = -1; // -1 for None
  int typeSelected = 0;
  bool vatEnabled = false;
  bool reverseCalculation = false;
  bool enableDeptSale = false;
  bool ticketPrint = true;

  void init() async {
    groups = await getDocumentIds();
  }

  Future<List<String>> getDocumentIds() async {
    final firestore = FirebaseFirestore.instance;
    final groupRef =
        firestore.collection('Admins').doc(adminNumber).collection('Groups');
    final querySnapshot = await groupRef.get();
    return querySnapshot.docs.map((doc) => doc.id).toList();
  }

  // Stream to get all departments in the Firestore collection
  // Stream<List<DepartmentModel>> getDepartmentsStream() {
  //   return firestore
  //       .collection('Admins')
  //       .doc(adminNumber)
  //       .collection('Groups')
  //       .snapshots()
  //       .map((snapshot) {
  //     return snapshot.docs.map((doc) {

  //       return DepartmentModel.fromFirestore(doc);
  //     }).toList();
  //   });
  // }

  Stream<List<DepartmentModel>> getDepartmentsStream(String adminNumber) {
    return firestore
        .collection('Admins')
        .doc(adminNumber)
        .collection('Groups')
        .snapshots()
        .map((snapshot) {
      // Assuming 'fjbv' is the document ID where the array is stored
      return snapshot.docs
          .map((doc) {
            // Accessing the 'fjbv' document
            var groupsData = doc.data()['fb'] as List<dynamic>;

            // Mapping each map in the array to a DepartmentModel
            return groupsData.map((group) {
              return DepartmentModel.fromMap(
                  group); // Assuming fromMap method exists
            }).toList();
          })
          .expand((x) => x)
          .toList(); // Flattening the list if necessary
    });
  }

  void toggleShow(bool? value) {
    show = value ?? false;
    notifyListeners();
  }

  // void updateName(String value) {

  //   name = value.text;
  //   notifyListeners();
  // }

  void selectKP(int? value) {
    kpSelected = value!;
    notifyListeners();
  }

  void updateType(int? value) {
    typeSelected = value!;
    notifyListeners();
  }

  void updateGroup(String? value, BuildContext context) {
    if (value == 'Add Group') {
      _showAddGroupDialog(context);
    } else {
      getDocumentIds().then((ids) => groups);
      group = value!;
    }
    notifyListeners();
  }

  void updateVat(String? value, BuildContext context) {
    if (value == 'Add VAT') {
      _showAddVatDialog(context);
    } else {
      vat = value!;
    }
    notifyListeners();
  }

  void togglePercentageEnabled(bool? value) {
    vatEnabled = value!;
    notifyListeners();
  }

  void toggleReverseCalculation(bool? value) {
    reverseCalculation = value!;
    notifyListeners();
  }

  void toggleEnableDeptSale(bool? value) {
    enableDeptSale = value!;
    notifyListeners();
  }

  void toggleTicketPrint(bool? value) {
    ticketPrint = value!;
    notifyListeners();
  }

  void updateAutoGeneratedCode(String value) {
    autoGeneratedCode = value;
    notifyListeners();
  }

  void toggleLoading() {
    isLoading = !isLoading;
    notifyListeners();
  }

  Future<void> submitData() async {
    isLoading = true;
    notifyListeners();

    try {
      // Reverse the name
      // String reversedName = reverseName(nameController.text.trim());

      // Data to be added in Firebase
      Map<String, dynamic> newUserData = {
        // 'name': name,
        'createdAt': Timestamp.now(),
        'department': nameController.text.toString(),
        'kp': kpSelected,
        'type': typeSelected,
        'vat': vat,
        'vatEnabled': vatEnabled,
        'reverseCalculation': reverseCalculation,
        'group': group,
        'enableDeptSale': enableDeptSale,
        'ticketPrint': ticketPrint,
        'autoGeneratedCode': autoGeneratedCode,

        // 'otherField1': value1,
        // 'otherField2': value2,

        // Add other fields as needed
      };

      // Firebase path
      String groupPath = 'Admins/$adminNumber/Groups/$group';

      // Check if the group already exists
      DocumentSnapshot groupDoc = await firestore.doc(groupPath).get();

      if (groupDoc.exists) {
        // If the group exists, add the new data to the existing array
        await firestore.doc(groupPath).update({
          group: FieldValue.arrayUnion([newUserData])
        });
      } else {
        // If the group does not exist, create it with the new array
        await firestore.doc(groupPath).set({
          group: [newUserData]
        });
      }

      if (!_isDisposed) {
        isLoading = false;
        notifyListeners();
      }
    } catch (e) {
      // Handle errors here
      print("Error: $e");
      if (!_isDisposed) {
        isLoading = false;
        notifyListeners();
      }
    } finally {
      isLoading = false;
      notifyListeners();
    }
  }

  bool _isDisposed = false;

  @override
  void dispose() {
    nameController.dispose();
    _isDisposed = true;
    super.dispose();
  }

  // Future<void> submitData() async {

  //   toggleLoading();  // Set isLoading to true
  //   try {
  //     // Simulate a network request or database save
  //     await Future.delayed(const Duration(seconds: 2));
  //     // Handle successful submission
  //   } catch (e) {
  //     // Handle errors
  //   } finally {
  //     toggleLoading();  // Set isLoading to false after completing
  //   }
  // }

  DepartmentController() {
    // firestore = FirebaseFirestore.instance;
  }

  Future<void> addNewGroup(Map<String, dynamic> groupData) async {
    final groupCollection =
        firestore.collection('admins').doc(adminNumber).collection('groups');

    try {
      // Fetch the last document to auto-generate the next code
      QuerySnapshot querySnapshot = await groupCollection.orderBy('code').get();
      int nextCodeNumber = querySnapshot.docs.length + 1;
      String nextCode = 'D${nextCodeNumber.toString().padLeft(3, '0')}';

      // Append the auto-generated code to group data
      groupData['code'] = nextCode;

      // Store the group data in Firebase
      await groupCollection.doc(nextCode).set(groupData);

      // Update the auto-generated code and notify listeners
      autoGeneratedCode = nextCode;
      notifyListeners();
    } catch (e) {
      print('Error adding group: $e');
    }
  }

  // Show Dialog to Add Group
  Future<void> _showAddGroupDialog(BuildContext context) async {
    String newGroup = '';

    await showDialog(
      context: context,
      builder: (context) {
        return AlertDialog(
          title: Text(
            'Add New Group',
            style: textTheme.headlineMedium,
          ),
          content: TextField(
            onChanged: (value) {
              newGroup = value;
            },
            decoration: const InputDecoration(hintText: 'Enter group name'),
          ),
          actions: [
            TextButton(
              onPressed: () {
                Navigator.of(context).pop();
              },
              child: const Text('Cancel'),
            ),
            TextButton(
              onPressed: () async {
                if (newGroup.isNotEmpty) {
                  // await _addGroupToFirebase(newGroup);
                  group = newGroup;
                  await firestore
                      .collection('Admins/$adminNumber/Groups')
                      .doc(group)
                      .set({
                    'Group': group,
                    'createdAt': Timestamp.now(),
                    'description': group
                  });
                  notifyListeners();
                  groups.add(group);
                }
                if (context.mounted) {
                  Navigator.of(context).pop();
                }
              },
              child: const Text('Add'),
            ),
          ],
        );
      },
    );
  }

  // Show Dialog to Add VAT
  Future<void> _showAddVatDialog(BuildContext context) async {
    String newVat = '';

    await showDialog(
      context: context,
      builder: (context) {
        return AlertDialog(
          title: Text(
            'Add New VAT',
            style: textTheme.headlineMedium,
          ),
          content: TextField(
            onChanged: (value) {
              newVat = value;
            },
            decoration: const InputDecoration(hintText: 'Enter VAT name'),
          ),
          actions: [
            TextButton(
              onPressed: () {
                Navigator.of(context).pop();
              },
              child: const Text('Cancel'),
            ),
            TextButton(
              onPressed: () async {
                if (newVat.isNotEmpty) {
                  // await _addVatToFirebase(newVat);
                  vat = newVat;
                  notifyListeners();
                  vatOptions.add(vat);
                }
                Navigator.of(context).pop();
              },
              child: const Text('Add'),
            ),
          ],
        );
      },
    );
  }
}
